/*
问题描述
小M最近在玩一款叫做“狼人拯救者”的游戏。在游戏中，玩家可以通过消耗金币来购买能力，这些能力会增加攻击力，但也会影响攻击速度。
小M是一个以攻击力为优先的玩家，但他必须保证自己的攻击速度不能低于0，因为攻击速度为负时将无法攻击。
现在小M面对商店中的N种能力，他拥有G枚金币和S点初始攻击速度。他想知道，在保持攻击速度大于等于0的前提下，他最多可以获得多少攻击力。

商店中每种能力用三元组表示为 array[i] = [c, s, d]，其中：

c 表示购买该能力需要的金币数；
s 表示该能力对攻击速度的影响，可以为正数、零或负数；
d 表示该能力对攻击力的增加值。
测试样例
样例1：

输入：n = 6 ,g = 100 ,s = 100 ,array = [[71, -51, 150], [40, 50, 100], [40, 50, 100], [30, 30, 70], [30, 30, 70], [30, 30, 70]]
输出：240

样例2：

输入：n = 6 ,g = 100 ,s = 100 ,array = [[71, -51, 150], [40, -50, 100], [40, -50, 100], [30, -30, 70], [30, -30, 70], [30, -30, 70]]
输出：210

样例3：

输入：n = 5 ,g = 50 ,s = 50 ,array = [[25, -25, 100], [25, -25, 50], [20, 0, 60], [15, -15, 40], [10, -5, 30]]
输出：170
仍然是一个动态规划问题，，有亿点点难
*/
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int solution(int n, int g, int s, vector<vector<int>>& array) {
    // Edit your code here
    vector<vector<int>> dp(n+1, vector<int>(g+1, -1)); // dp[i][j] 表示在前 i 种能力中，花费 j 枚金币时，能够获得的最大攻击力
    vector<vector<int>> speed(n+1, vector<int>(g+1, -1)); // speed[i][j] 表示在前 i 种能力中，花费 j 枚金币时，对应的攻击速度
    dp[0][0] = 0; // 初始状态，不购买任何能力时的攻击力为0
    speed[0][0] = s; // 初始状态，初始攻击速度为 s

    for (int i = 1; i <= n; ++i) 
    {
        for (int j = 0; j <= g; ++j) 
        {
            dp[i][j] = dp[i-1][j]; // 不选择第 i 种能力
            speed[i][j] = speed[i-1][j]; // 不选择第 i 种能力
            if (j >= array[i-1][0] && dp[i-1][j-array[i-1][0]] != -1) 
            {
                int new_speed = speed[i-1][j-array[i-1][0]] + array[i-1][1];
                if (new_speed >= 0) 
                {
                    if (dp[i][j] < dp[i-1][j-array[i-1][0]] + array[i-1][2]) 
                    {
                        dp[i][j] = dp[i-1][j-array[i-1][0]] + array[i-1][2];
                        speed[i][j] = new_speed;
                    }
                }
            }
        }
    }

    int result = 0;
    for (int j = 0; j <= g; ++j) 
    {
        result = max(result, dp[n][j]);
    }
    return result;
}

int main() {
    // Add your test cases here
    vector<vector<int>> test1 = {
        {71, 51, 150},
        {40, 50, 100},
        {40, 50, 100},
        {30, 30, 70},
        {30, 30, 70},
        {30, 30, 70}
    };
    cout << (solution(6, 100, 100, test1) == 240) << endl;
    
    test1 = {
        {71, -51, 150},
        {40, -50, 100},
        {40, -50, 100},
        {30, -30, 70},
        {30, -30, 70},
        {30, -30, 70}
    };
    cout << (solution(6, 100, 100, test1) == 210) << endl;

    return 0;
}
